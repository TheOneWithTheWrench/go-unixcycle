// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package unixcycle_test

import (
	"context"
	"sync"
	
	"github.com/theonewiththewrench/unixcycle"
)

// Ensure, that ProberMock does implement unixcycle.Prober.
// If this is not the case, regenerate this file with moq.
var _ unixcycle.Prober = &ProberMock{}

// ProberMock is a mock implementation of unixcycle.Prober.
//
//	func TestSomethingThatUsesProber(t *testing.T) {
//
//		// make and configure a mocked unixcycle.Prober
//		mockedProber := &ProberMock{
//			ProbeFunc: func(ctx context.Context) error {
//				panic("mock out the Probe method")
//			},
//		}
//
//		// use mockedProber in code that requires unixcycle.Prober
//		// and then make assertions.
//
//	}
type ProberMock struct {
	// ProbeFunc mocks the Probe method.
	ProbeFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Probe holds details about calls to the Probe method.
		Probe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockProbe sync.RWMutex
}

// Probe calls ProbeFunc.
func (mock *ProberMock) Probe(ctx context.Context) error {
	if mock.ProbeFunc == nil {
		panic("ProberMock.ProbeFunc: method is nil but Prober.Probe was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockProbe.Lock()
	mock.calls.Probe = append(mock.calls.Probe, callInfo)
	mock.lockProbe.Unlock()
	return mock.ProbeFunc(ctx)
}

// ProbeCalls gets all the calls that were made to Probe.
// Check the length with:
//
//	len(mockedProber.ProbeCalls())
func (mock *ProberMock) ProbeCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockProbe.RLock()
	calls = mock.calls.Probe
	mock.lockProbe.RUnlock()
	return calls
}

// Ensure, that TestingMMock does implement unixcycle.TestingM.
// If this is not the case, regenerate this file with moq.
var _ unixcycle.TestingM = &TestingMMock{}

// TestingMMock is a mock implementation of unixcycle.TestingM.
//
//	func TestSomethingThatUsesTestingM(t *testing.T) {
//
//		// make and configure a mocked unixcycle.TestingM
//		mockedTestingM := &TestingMMock{
//			RunFunc: func() int {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedTestingM in code that requires unixcycle.TestingM
//		// and then make assertions.
//
//	}
type TestingMMock struct {
	// RunFunc mocks the Run method.
	RunFunc func() int

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
		}
	}
	lockRun sync.RWMutex
}

// Run calls RunFunc.
func (mock *TestingMMock) Run() int {
	if mock.RunFunc == nil {
		panic("TestingMMock.RunFunc: method is nil but TestingM.Run was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc()
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedTestingM.RunCalls())
func (mock *TestingMMock) RunCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}
